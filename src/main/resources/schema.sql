DROP TABLE IF EXISTS film_genre;
DROP TABLE IF EXISTS film_likes;
DROP TABLE IF EXISTS friendship;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS film;
DROP TABLE IF EXISTS restrictions;
DROP TABLE IF EXISTS users;

CREATE TABLE IF NOT EXISTS GENRE
(
    GENRE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME     VARCHAR(100) NOT NULL UNIQUE
);


CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RATING          VARCHAR(100) NOT NULL UNIQUE
);


CREATE TABLE IF NOT EXISTS FILM
(
    FILM_ID         INTEGER GENERATED BY DEFAULT AS IDENTITY,
    NAME            VARCHAR(255) NOT NULL,
    DESCRIPTION     VARCHAR(255),
    RELEASE_DATE    DATE,
    DURATION        BIGINT,
    MPA_ID INTEGER,
    CONSTRAINT FILM_PK PRIMARY KEY (FILM_ID),
    CONSTRAINT FILM_RESTRICTIONS_AGE_RESTRICTION_FK
        FOREIGN KEY (MPA_ID) REFERENCES MPA ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS FILM_GENRE
(
    FILM_ID  INTEGER NOT NULL,
    GENRE_ID INTEGER NOT NULL,
    CONSTRAINT FILM_GENRE_PK PRIMARY KEY (FILM_ID,
                                          GENRE_ID),
    CONSTRAINT FILM_GENRE_FILM_FILM_ID_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILM ON DELETE CASCADE,
    CONSTRAINT FILM_GENRE_GENRE_GENRE_ID_FK
        FOREIGN KEY (GENRE_ID) REFERENCES GENRE ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID  INTEGER GENERATED BY DEFAULT AS IDENTITY,
    EMAIL    VARCHAR(100),
    LOGIN    VARCHAR(100),
    NAME     VARCHAR(100),
    BIRTHDAY DATE,
    CONSTRAINT USER_PK PRIMARY KEY (USER_ID)
);


CREATE TABLE IF NOT EXISTS FILM_LIKES
(
    FILM_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    CONSTRAINT FILM_LIKES_PK PRIMARY KEY (FILM_ID,
                                          USER_ID),
    CONSTRAINT FILM_LIKES_FILM_FILM_ID_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILM ON DELETE CASCADE,
    CONSTRAINT FILM_LIKES_USER_USER_ID_FK
        FOREIGN KEY (USER_ID) REFERENCES USERS ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    USER_ID           INTEGER NOT NULL,
    FRIEND_ID         INTEGER NOT NULL,
    STATUS BOOLEAN,
    CONSTRAINT FRIENDSHIP_PK PRIMARY KEY (USER_ID,
                                          FRIEND_ID),
    CONSTRAINT FRIENDSHIP_USER_FRIEND_ID_FK
        FOREIGN KEY (FRIEND_ID) REFERENCES USERS ON DELETE CASCADE,
    CONSTRAINT FRIENDSHIP_USER_USER_ID_FK
        FOREIGN KEY (USER_ID) REFERENCES USERS ON DELETE CASCADE
);
